// <auto-generated />
using System;
using BussinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241018172535_InitFullModel")]
    partial class InitFullModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObjects.Entities.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            ActivityName = "Đi bộ"
                        },
                        new
                        {
                            ActivityId = 2,
                            ActivityName = "Đi phượt"
                        },
                        new
                        {
                            ActivityId = 3,
                            ActivityName = "Chơi golf"
                        },
                        new
                        {
                            ActivityId = 4,
                            ActivityName = "Tắm biển"
                        },
                        new
                        {
                            ActivityId = 5,
                            ActivityName = "Leo núi"
                        },
                        new
                        {
                            ActivityId = 6,
                            ActivityName = "Câu cá"
                        },
                        new
                        {
                            ActivityId = 7,
                            ActivityName = "Đi xe đạp"
                        },
                        new
                        {
                            ActivityId = 8,
                            ActivityName = "Tham quan văn hóa"
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "traveler",
                            NormalizedName = "TRAVELER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "local",
                            NormalizedName = "LOCAL"
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MatchingActivitiesCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "971ec73b-048b-4609-b226-c804d04f4877",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FullName = "User One",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8865),
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "005e58b9-49f1-466f-bcc0-d0cec93deb89",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FullName = "User Two",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8873),
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1274b46-b394-4cb4-a13c-bc9d292b2d74",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FullName = "User Three",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8876),
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b86bb805-555c-4d12-b8c2-55c376b3df9c",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FullName = "User Four",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8879),
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec9e96f-f8c4-4e3c-a182-a2f0328295d5",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            FullName = "User Five",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8883),
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24e3c215-295f-47df-a2e5-9a965f1d7524",
                            Email = "userSystem1@example.com",
                            EmailConfirmed = false,
                            FullName = "User System",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8886),
                            TwoFactorEnabled = false,
                            UserName = "userSystem1"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5aa810bf-1916-441d-83eb-83bfe6fc7c96",
                            Email = "Admin1@example.com",
                            EmailConfirmed = false,
                            FullName = "Admin 1",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            RegistrationTime = new DateTime(2024, 10, 18, 17, 25, 34, 74, DateTimeKind.Utc).AddTicks(8889),
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaidById")
                        .HasColumnType("int");

                    b.Property<string>("PriceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaidById");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinationId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("BussinessObjects.Entities.DetailForm", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("FormId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DetailForms");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreaterUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BussinessObjects.Entities.EventParticipants", b =>
                {
                    b.Property<int>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventParticipantId"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventParticipantId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("BussinessObjects.Entities.GroupPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PostById")
                        .HasColumnType("int");

                    b.Property<int?>("PostByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostByUserId");

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("BussinessObjects.Entities.GroupPostPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("PostId");

                    b.ToTable("GroupPostPhotos");
                });

            modelBuilder.Entity("BussinessObjects.Entities.HomePhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserHomeUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("UserHomeUserId");

                    b.ToTable("HomePhotos");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileUserId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "Hà Nội"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "Hồ Chí Minh"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "Đà Nẵng"
                        },
                        new
                        {
                            LocationId = 4,
                            LocationName = "Huế"
                        },
                        new
                        {
                            LocationId = 5,
                            LocationName = "Hội An"
                        },
                        new
                        {
                            LocationId = 6,
                            LocationName = "Nha Trang"
                        },
                        new
                        {
                            LocationId = 7,
                            LocationName = "Phú Quốc"
                        },
                        new
                        {
                            LocationId = 8,
                            LocationName = "Vịnh Hạ Long"
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendToId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SendToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BussinessObjects.Entities.OnTravelling", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTravelling")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "DestinationId");

                    b.HasIndex("DestinationId");

                    b.ToTable("OnTravellings");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PastTripPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewById")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("ReviewById");

                    b.HasIndex("UserId");

                    b.ToTable("PastTripPosts");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PostComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentedById")
                        .HasColumnType("int");

                    b.Property<int?>("CommentedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupPostPostId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("GroupPostPostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PostPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<int?>("GroupPostPostId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("GroupPostPostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostPhotos");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Reaction", b =>
                {
                    b.Property<int>("ReactedById")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("ReactedById", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportToId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportToId");

                    b.HasIndex("SentById");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("FormVersion")
                        .HasColumnType("int");

                    b.Property<int>("RequestById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestToId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestById");

                    b.HasIndex("RequestToId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BussinessObjects.Entities.SpokenLanguage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Proficiency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("BussinessObjects.Entities.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"));

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileUserId")
                        .HasColumnType("int");

                    b.HasKey("UniversityId");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserActivity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserActivities");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ActivityId = 1
                        },
                        new
                        {
                            UserId = 1,
                            ActivityId = 2
                        },
                        new
                        {
                            UserId = 1,
                            ActivityId = 3
                        },
                        new
                        {
                            UserId = 1,
                            ActivityId = 4
                        },
                        new
                        {
                            UserId = 2,
                            ActivityId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ActivityId = 3
                        },
                        new
                        {
                            UserId = 3,
                            ActivityId = 2
                        },
                        new
                        {
                            UserId = 3,
                            ActivityId = 4
                        },
                        new
                        {
                            UserId = 5,
                            ActivityId = 1
                        },
                        new
                        {
                            UserId = 5,
                            ActivityId = 2
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserDescription", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MusicMoviesBooks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatToShare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhyUseTravelMate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserDescriptions");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserEducation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("GraduationYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("UserEducations");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserHome", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivateRoom")
                        .HasColumnType("bit");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<string>("RoomMate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transportation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserHomes");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserLocation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LocationId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("UserLocations");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            UserId = 2,
                            LocationId = 3
                        },
                        new
                        {
                            UserId = 3,
                            LocationId = 3
                        },
                        new
                        {
                            UserId = 4,
                            LocationId = 3
                        },
                        new
                        {
                            UserId = 5,
                            LocationId = 3
                        },
                        new
                        {
                            UserId = 3,
                            LocationId = 2
                        },
                        new
                        {
                            UserId = 4,
                            LocationId = 2
                        });
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HostingAvailability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GroupParticipant", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupParticipants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Entities.Contract", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedContracts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "PaidByUser")
                        .WithMany("PaidContracts")
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("PaidByUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.DetailForm", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithOne("DetailForm")
                        .HasForeignKey("BussinessObjects.Entities.DetailForm", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.EventParticipants", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BussinessObjects.Entities.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Friendship", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", null)
                        .WithMany("Friendships")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User1")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User2")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("BussinessObjects.Entities.GroupPost", b =>
                {
                    b.HasOne("Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "PostByUser")
                        .WithMany()
                        .HasForeignKey("PostByUserId");

                    b.Navigation("Group");

                    b.Navigation("PostByUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.GroupPostPhoto", b =>
                {
                    b.HasOne("BussinessObjects.Entities.GroupPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObjects.Entities.HomePhoto", b =>
                {
                    b.HasOne("BussinessObjects.Entities.UserHome", "UserHome")
                        .WithMany("HomePhotos")
                        .HasForeignKey("UserHomeUserId");

                    b.Navigation("UserHome");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Language", b =>
                {
                    b.HasOne("BussinessObjects.Entities.UserProfile", null)
                        .WithMany("Languages")
                        .HasForeignKey("UserProfileUserId");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Message", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("Messages")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "SendToUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("SendToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("SendToUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Notification", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.OnTravelling", b =>
                {
                    b.HasOne("BussinessObjects.Entities.Destination", "Destination")
                        .WithMany("Travellers")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithMany("OnTravel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PastTripPost", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ReviewByUser")
                        .WithMany("PastTripPostReviews")
                        .HasForeignKey("ReviewById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "UserPastTrip")
                        .WithMany("PastTripPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReviewByUser");

                    b.Navigation("UserPastTrip");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PostComment", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("BussinessObjects.Entities.GroupPost", "GroupPost")
                        .WithMany("Comments")
                        .HasForeignKey("GroupPostPostId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("GroupPost");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PostPhoto", b =>
                {
                    b.HasOne("BussinessObjects.Entities.GroupPost", null)
                        .WithMany("PostPhotos")
                        .HasForeignKey("GroupPostPostId");

                    b.HasOne("BussinessObjects.Entities.PastTripPost", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Reaction", b =>
                {
                    b.HasOne("BussinessObjects.Entities.GroupPost", "GroupPost")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ReactedByUser")
                        .WithMany("Reactions")
                        .HasForeignKey("ReactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupPost");

                    b.Navigation("ReactedByUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Report", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ReportToUser")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReportToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "SentByUser")
                        .WithMany("Reports")
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportToUser");

                    b.Navigation("SentByUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Request", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "RequestByUser")
                        .WithMany("Requests")
                        .HasForeignKey("RequestById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "RequestToUser")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("RequestToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestByUser");

                    b.Navigation("RequestToUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.SpokenLanguage", b =>
                {
                    b.HasOne("BussinessObjects.Entities.Language", "Language")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.University", b =>
                {
                    b.HasOne("BussinessObjects.Entities.UserProfile", null)
                        .WithMany("Universities")
                        .HasForeignKey("UserProfileUserId");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserActivity", b =>
                {
                    b.HasOne("BussinessObjects.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserActivities")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("Activity");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserDescription", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithOne("UserDescription")
                        .HasForeignKey("BussinessObjects.Entities.UserDescription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserEducation", b =>
                {
                    b.HasOne("BussinessObjects.Entities.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithMany("UserEducations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserHome", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithOne("UserHome")
                        .HasForeignKey("BussinessObjects.Entities.UserHome", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserLocation", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserLocations")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BussinessObjects.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserProfile", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("BussinessObjects.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("GroupParticipant", b =>
                {
                    b.HasOne("Group", "Group")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", "User")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObjects.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BussinessObjects.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObjects.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CreatedContracts");

                    b.Navigation("DetailForm");

                    b.Navigation("EventParticipants");

                    b.Navigation("Friendships");

                    b.Navigation("GroupParticipants");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("OnTravel");

                    b.Navigation("PaidContracts");

                    b.Navigation("PastTripPostReviews");

                    b.Navigation("PastTripPosts");

                    b.Navigation("Reactions");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("ReceivedReports");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("UserActivities");

                    b.Navigation("UserDescription");

                    b.Navigation("UserEducations");

                    b.Navigation("UserHome");

                    b.Navigation("UserLocations");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Destination", b =>
                {
                    b.Navigation("Travellers");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("BussinessObjects.Entities.GroupPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostPhotos");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("BussinessObjects.Entities.Language", b =>
                {
                    b.Navigation("SpokenLanguages");
                });

            modelBuilder.Entity("BussinessObjects.Entities.PastTripPost", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("BussinessObjects.Entities.University", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserHome", b =>
                {
                    b.Navigation("HomePhotos");
                });

            modelBuilder.Entity("BussinessObjects.Entities.UserProfile", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Navigation("GroupParticipants");

                    b.Navigation("GroupPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
